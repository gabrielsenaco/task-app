{"version":3,"sources":["components/CompleteTaskIcon.js","components/TaskItem.js","components/TaskItemEditor.js","components/TaskList.js","components/CompletedTaskList.js","components/TaskManager.js","components/Footer.js","App.js","index.js"],"names":["CompleteTaskIcon","props","handleMouseOver","setState","hovering","handlerMouseLeave","state","checkboxIcon","onClick","className","onMouseLeave","emptyIcon","onMouseOver","this","React","Component","TaskItem","handleRemoveTask","onRemoveTask","id","handleEnableEditor","onEnableTaskEditor","handleCompleteTask","onCompleteTask","text","index","showActions","TaskItemEditor","handleInputChange","event","target","value","handleSubmitTask","length","preventDefault","reset","onChangeTaskText","onSubmit","htmlFor","type","onChange","defaultValue","name","required","TaskList","tasks","items","filter","task","completed","map","editor","defineTaskEditor","push","uniqid","TaskManager","submitTaskHandler","inputChangeHandler","placeholder","Footer","href","rel","App","prevState","addTask","removeTask","concat","isEditor","changeTaskText","newText","checkTask","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d26a5db.chunk.js","sourcesContent":["import React from 'react'\nimport { IconSquare, IconCheckbox } from '@tabler/icons';\n\n// TO-DO CHECK LATER IF DOING THIS IS A GOOD IDEA. (PERFORMANCE)\nexport default class CompleteTaskIcon extends React.Component{\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      hovering: false\n    }\n    \n    this.checkboxIcon = <IconCheckbox onClick={this.props.onClick} className='icon task-checked' onMouseLeave={this.handlerMouseLeave}/>\n    this.emptyIcon = <IconSquare className='icon task-not-checked' onMouseOver={this.handleMouseOver}/>\n  }\n\n  handleMouseOver = () => {\n    this.setState({\n      hovering: true\n    })\n  }\n\n  handlerMouseLeave = () => {\n    this.setState({\n      hovering: false\n    })\n  }\n\n  render() {\n    return this.state.hovering ? this.checkboxIcon : this.emptyIcon\n  }\n}","import React from 'react'\nimport './../styles/TaskItem.css'\nimport { IconTrash, IconPencil } from '@tabler/icons'\nimport CompleteTaskIcon from './CompleteTaskIcon'\n\nexport default class TaskItem extends React.Component {\n  handleRemoveTask = () => {\n    this.props.onRemoveTask(this.props.id)\n  }\n\n  handleEnableEditor = () => {\n    this.props.onEnableTaskEditor(this.props.id, true)\n  }\n\n  handleCompleteTask = () => {\n    this.props.onCompleteTask(this.props.id)\n  }\n\n  render () {\n    const { text, index, showActions } = this.props\n    return (\n      <li className='task-item'>\n        <span className='task-item-index'>{index}. </span>\n        <p className='task-item-text'>{text}</p>\n        {showActions &&\n        <div className='task-item-actions'>\n          <CompleteTaskIcon onClick={this.handleCompleteTask} />\n          <IconPencil\n            className='icon task-item-edit'\n            onClick={this.handleEnableEditor}\n          />\n          <IconTrash\n            className='icon task-item-remove'\n            onClick={this.handleRemoveTask}\n          />\n        </div>}\n        {!showActions &&\n        <div className='fill-space'>\n        </div>}\n      </li>\n    )\n  }\n}\n","import React from 'react'\nimport './../styles/FormStyle.css'\n\nexport default class TaskItemEditor extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      text: this.props.text\n    }\n  }\n\n  handleInputChange = event => {\n    this.setState({ text: event.target.value })\n  }\n\n  handleSubmitTask = event => {\n    if (this.state.text.length === 0) return\n    event.preventDefault()\n    event.target.reset()\n    this.props.onChangeTaskText(this.props.id, this.state.text)\n  }\n\n  render () {\n    const { text, index } = this.props\n    return (\n      <form\n        className='task-item task-item-editor form-task'\n        onSubmit={this.handleSubmitTask}\n      >\n        <span className='task-item-index'>{index}. </span>\n        <div className='container-editor'>\n          <label htmlFor='task-text-editor'>Change your task</label>\n          <input\n            type='text'\n            onChange={this.handleInputChange}\n            defaultValue={text}\n            className='input-task-text task-item-text'\n            id='task-text-editor'\n            name='task-text-editor'\n            required\n          />\n          <button type='submit' className='submit-btn task-item-editor-submit'>\n            Confirm changes\n          </button>\n        </div>\n      </form>\n    )\n  }\n}\n","import React from 'react'\nimport uniqid from 'uniqid'\nimport TaskItem from './TaskItem'\nimport TaskItemEditor from './TaskItemEditor'\nimport './../styles/TaskList.css'\n\nexport default class TaskList extends React.Component {\n\n  render () {\n    const { tasks, onRemoveTask, onChangeTaskText, onCompleteTask } = this.props\n    let items = tasks.filter((task)=>!task.completed)\n\n    items = items.map((task, index) => {\n      if (task.editor) {\n        return (\n          <TaskItemEditor\n            index={index + 1}\n            text={task.text}\n            id={task.id}\n            key={task.id}\n            onChangeTaskText={onChangeTaskText}\n          />\n        )\n      } else {\n        return (\n          <TaskItem\n            index={index + 1}\n            text={task.text}\n            id={task.id}\n            key={task.id}\n            onRemoveTask={onRemoveTask}\n            onEnableTaskEditor={this.props.defineTaskEditor}\n            onCompleteTask={onCompleteTask}\n            showActions={true}\n          />\n        )\n      }\n    })\n\n    if(items.length === 0 ) {\n      items.push((\n        <p key={uniqid()}>Your tasks will be shown here. Add a new task.</p>\n        ))\n    }\n\n    return (\n      <div>\n        <h2 className='title'>Task list</h2>\n        <ul className='tasks-list'>{items}</ul>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport TaskItem from './TaskItem'\nimport './../styles/CompletedTaskList.css'\n\nexport default class TaskList extends React.Component {\n\n  render () {\n    const { tasks } = this.props\n    let items = tasks.filter((task, index) => task.completed)\n    if(items.length === 0) return null\n\n    items = items.map((task, index) => \n    {\n      return (\n          <TaskItem\n            index={index + 1}\n            text={task.text}\n            id={task.id}\n            key={task.id}\n          />\n        )\n    })\n\n    return (\n      <div id='completed-tasks-container'>\n        <h2 className='title'>Completed Task List</h2>\n        <ul className='tasks-list'>{items}</ul>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport './../styles/FormStyle.css'\n\nexport default class TaskManager extends React.Component {\n  render () {\n    const { submitTaskHandler, inputChangeHandler } = this.props\n    return (\n      <form id='submit-task' className='form-task' onSubmit={submitTaskHandler}>\n        <h2 className='title'>Add new task</h2>\n        <label htmlFor='form-task-name'>Enter task</label>\n        <input\n          type='text'\n          id='form-task-name'\n          className='input-task-text'\n          placeholder='Enter your new task'\n          required\n          onChange={inputChangeHandler}\n        />\n        <button type='submit' id='submit-task-btn' className='submit-btn btn'>\n          Add Task\n        </button>\n      </form>\n    )\n  }\n}\n","import React from 'react'\nimport { IconBrandGithub } from '@tabler/icons';\nimport './../styles/Footer.css'\n\nexport default class Footer extends React.Component{\n\n  render() {\n   return (\n    <footer>\n      <a href='https://github.com/gabesenacom/task-app' rel=\"noreferrer\" target='_blank'>\n        <IconBrandGithub />\n        Task App repository\n      </a>\n      <a href='https://github.com/gabesenacom' rel=\"noreferrer\" target='_blank'>\n        <IconBrandGithub />\n        Author's github\n      </a>\n    </footer>\n      )\n  }\n}","import React from 'react'\nimport uniqid from 'uniqid'\nimport TaskList from './components/TaskList'\nimport CompletedTaskList from './components/CompletedTaskList'\nimport TaskManager from './components/TaskManager'\nimport Footer from './components/Footer'\nimport './styles/App.css'\n\nexport default class App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      tasks: [],\n      task: {\n        text: '',\n        id: uniqid()\n      }\n    }\n  }\n\n  handleInputChange = event => {\n    this.setState(prevState => ({\n      task: { text: event.target.value, id: prevState.task.id }\n    }))\n  }\n\n  handleSubmitTask = event => {\n    if (this.state.task.text.length === 0) return\n    event.preventDefault()\n    event.target.reset()\n    this.addTask()\n  }\n\n  removeTask = id => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.filter(task => task.id !== id)\n    }))\n  }\n\n  addTask = () => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.concat(prevState.task),\n      task: {\n        text: '',\n        id: uniqid()\n      }\n    }))\n  }\n\n  defineTaskEditor = (id, isEditor) => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map(task => {\n        if (task.id === id) {\n          task.editor = isEditor\n        }\n        return task\n      })\n    }))\n  }\n\n  changeTaskText = (id, newText) => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map(task => {\n        if (task.id === id) {\n          task.text = newText\n          task.editor = false\n        }\n        return task\n      })\n    }))\n  }\n\n  checkTask = (id) => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map(task => {\n        if (task.id === id) {\n          task.completed = true\n        }\n        return task\n      })\n    }))\n  }\n\n  render () {\n    return (\n        <main>\n        <h1 className='title'>Task App</h1>\n        <TaskManager\n          submitTaskHandler={this.handleSubmitTask}\n          inputChangeHandler={this.handleInputChange}\n        />\n        <TaskList\n          tasks={this.state.tasks}  \n          onRemoveTask={this.removeTask}\n          defineTaskEditor={this.defineTaskEditor}\n          onChangeTaskText={this.changeTaskText}\n          onCompleteTask={this.checkTask}\n        />\n        <CompletedTaskList\n          tasks={this.state.tasks}\n        />\n        <Footer/>\n      </main>\n      \n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './styles/index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}